#!/usr/bin/env python

import rospy
import actionlib
from final_project_group2 import follower
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import numpy as np


def movebase_client(location):
    """This function uses ROS path planning and robot control to navigate to a goal coordinate

    Args:
        location (list): x and y coordinates for robot to travel to

    Returns:
        [bool]: Return True if goal is reached
    """
    location_x = location[0]
    location_y = location[1]

    client = actionlib.SimpleActionClient('/follower/move_base', MoveBaseAction)
    client.wait_for_server()

    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
    goal.target_pose.pose.position.x = location_x
    goal.target_pose.pose.position.y = location_y
    goal.target_pose.pose.orientation.w = 1.0

    client.send_goal(goal)
    wait = client.wait_for_result()
    goal = True
    rospy.loginfo('Follower arrived at goal!')
    return goal

if __name__ == '__main__':
    rospy.init_node('movebase_client_follower')
    follow = follower.Follower()


    while True:

        rospy.loginfo('begin')
        wypts = follow.get_follower_goal()

        goal_reached = False
        
        if wypts[0] and wypts[1]:  # If marker is detected, follow
            rospy.loginfo('Marker Detected! Following Marker...')
            
            while goal_reached is False:
                goal_reached = movebase_client(wypts)
            continue

        else:  # If no marker, rotate 360, 
            rospy.loginfo('Searching for marker...')
            count = 0
            angle = 90
            limit = 2 * np.pi
            while count < limit:
                count += np.deg2rad(angle)
                follow.rotate(angle)
                wypts = follow.get_follower_goal()

                if wypts[0] and wypts[1]:  # If marker is found follow
                    rospy.loginfo('Marker detected! Following Marker...')
                    while goal_reached is False:
                        goal_reached = movebase_client(wypts)
                    
                    break

            if True:  # Look to parameter server to go to leaders goal
                while goal_reached is False:
                    rospy.loginfo('Retrieving destination from param server...')
                    goal_x = rospy.get_param('goal_x')
                    goal_y = rospy.get_param('goal_y')
                    wypts = [goal_x, goal_y]
                    goal_reached = movebase_client(wypts)
                continue               

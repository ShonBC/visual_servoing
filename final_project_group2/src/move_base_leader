#!/usr/bin/env python

import rospy
import actionlib
import leader
import sys
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from geometry_msgs.msg import PoseStamped


def movebase_client(location):
    """
    This function uses ROS path planning and robot control to navigate to a goal coordinate
    
    Args:
        location(list): The x, y position of the leader's next goal position 

    Returns:
        goal(bool): returns true when leader arrives at goal position
    """
    location_x = location[0]
    location_y = location[1]

    client = actionlib.SimpleActionClient('/leader/move_base', MoveBaseAction)
    client.wait_for_server()

    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
    goal.target_pose.pose.position.x = location_x
    goal.target_pose.pose.position.y = location_y
    goal.target_pose.pose.orientation.w = 1.0

    client.send_goal(goal)
    wait = client.wait_for_result()
    goal = True
    rospy.loginfo('Leader arrived at goal')
    return goal


if __name__ == '__main__':
    rospy.init_node('movebase_client_leader')
    leader = leader.Leader()
    wypts = leader.waypoints
    keys_ = list(wypts.keys())
    for i in range(1, 5):
        goal_reached = False
        for num in range(0, 4):
            if i in keys_[num]:
                location_next = [float(wypts[keys_[num]]['position']['x']), float(wypts[keys_[num]]['position']['y'])]
                room = keys_[num]
                rospy.set_param('goal_x', location_next[0])
                rospy.set_param('goal_y', location_next[1])
                rospy.loginfo("Leader's new goal is now {}".format(room[1]))
                while goal_reached is False:
                    goal_reached = movebase_client(location_next)
                continue

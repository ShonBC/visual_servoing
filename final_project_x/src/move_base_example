#!/usr/bin/env python


import rospy
import actionlib
import sys
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from geometry_msgs.msg import PoseStamped


def handle_inputs():
    rospy.myargv(argv=sys.argv)
    if len(sys.argv) == 2:
        movebase_client(sys.argv[1])
    else:
        print("Not enough arguments")
    return


def movebase_client(location):
    location_x = None
    location_y = None

    if location == "bedroom":
        location_x = -5.824071732770952
        location_y = -0.010955761782525698
    if location == "kitchen":
        location_x = 6.817604493856948
        location_y = -1.5381289160341622
    if location == "livingroom":
        location_x = 3.783516793423246
        location_y = -1.221649526236856
    if location == "recreationroom":
        location_x = 1.7943703434058262
        location_y = 4.2165058642617

    client = actionlib.SimpleActionClient('/leader/move_base', MoveBaseAction)
    client.wait_for_server()

    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
    # goal.target_pose.pose.position.x = 8.56
    # goal.target_pose.pose.position.y = 1.27
    goal.target_pose.pose.position.x = location_x
    goal.target_pose.pose.position.y = location_y
    goal.target_pose.pose.orientation.w = 1.0

    client.send_goal(goal)
    wait = client.wait_for_result()
    if not wait:
        rospy.logerr("Action server not available!")
        rospy.signal_shutdown("Action server not available!")
    else:
        return client.get_result()


def publish_on_move_base():
    # Create a publisher
    pub = rospy.Publisher("/leader/move_base_simple/goal", PoseStamped, queue_size=10)
    # Create a message of type PoseStamped
    message = PoseStamped()
    # Build your message
    message.header.frame_id = "map"
    message.header.stamp = rospy.Time.now()
    message.pose.position.x = 3.783516793423246
    message.pose.position.y = 3
    message.pose.position.z = 0
    message.pose.orientation.w = 1

    rate = rospy.Rate(1)

    while not rospy.is_shutdown():
        pub.publish(message)
        rate.sleep()


# if __name__ == '__main__':
    # try:
    #     rospy.init_node('movebase_client_py')
    #     result = movebase_client()
    #     if result:
    #         rospy.loginfo("Goal execution done!")
    # except rospy.ROSInterruptException:
    #     rospy.loginfo("Navigation test finished.")


if __name__ == '__main__':
    rospy.init_node('movebase_client_leader')
    handle_inputs()
    # publish_on_move_base()
